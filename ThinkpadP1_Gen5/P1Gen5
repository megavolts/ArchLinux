# /bin/bash
# Dual boot with windows
# With 2 DISK
# /dev/nvme0n1p1  512.0MiB  EF00  EFI system partition
# /dev/nvme1n1p1    8300 Linux Filesystem on LVM
# /dev/nvme1n1p2 1.5TiB
#  1            2048         1050623   512.0 MiB   EF00  EFI system partition
#  2         1050624         1083391    16.0 MiB         Microsoft Reserved
#  3         1083392       314402815   149.4 GiB         Microsoft Windows
#  4       314402816       315654143   611.0 MiB         Windows recovery environment
#  5       315654144      3907029134     1.7 TiB   8300  Linux filesystem on LVM

DISK=/dev/nvme0n1
NEWUSER=megavolts
BOOTPART=1
CRYPTPART=5
INSTALL=True

echo 'Enter a default passphrase use to encrypt the disk and serve as password for root and megavolts:'
stty -echo
read PASSWORD
stty echo


if $INSTALL
then
  sgdisk -n $ROOTPART:315654144:3907029134 -t $ROOTPART:8300 -c $ROOTPART:"CRYPTARCH" $DISK

  # echo -e ".. prepare boot partition"
  # mkfs.fat -F32 ${DISK}${BOOTPART}

  echo -e ".. wipe partition"
  # Wipe partition with zeros after creating an encrypted container with a random key
  cryptsetup open --type plain ${DISK}p$BOOTPART container --key-file /dev/urandom 
  dd if =/dev/zero of=/dev/mapper/container status=progress bs=1M
  cryptsetup close container
  echo -e ".. encrypting root partition"
  echo -en $PASSWORD | cryptsetup luksFormat --align-payload=8192 -s 512 -c aes-xts-plain64 /dev/disk/by-partlabel/CRYPTARCH -q
  echo -en $PASSWORD | cryptsetup luksOpen /dev/disk/by-partlabel/CRYPTARCH cryptarch
  mkfs.btrfs --force --label arch /dev/mapper/cryptarch
else
  echo -en $PASSWORD | cryptsetup luksOpen /dev/disk/by-partlabel/CRYPTARCH cryptarch
fi
echo -e ".. create subvolumes"
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard /dev/mapper/cryptarch /mnt/

if $INSTALL
then
  btrfs subvolume create /mnt/@root
  btrfs subvolume create /mnt/@home
  btrfs subvolume create /mnt/@snapshots
  btrfs subvolume create /mnt/@snapshots/@root_snaps	
  btrfs subvolume create /mnt/@snapshots/@home_snaps	
  btrfs subvolume create /mnt/@swap
  btrfs subvolume create /mnt/@var
  btrfs subvolume create /mnt/@tmp
else
  btrfs subvolume delete /mnt/@snapshots/@root_snaps/*/snapshot
  rm /mnt/@snapshots/@root_snaps/* -R
  btrfs subvolume delete /mnt/@snapshots/@root_snaps
  
  # mv /mnt/@snapshots
  mv /mnt/@root /mnt/@root_old
  
  echo -e "... create new root and swap subvolume"
  btrfs subvolume create /mnt/@root
  btrfs subvolume create /mnt/@swap
  btrfs subvolume create /mnt/@snapshots/@root_snaps	
fi
  
umount /mnt

# Mount subvolume
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard,subvol=@root /dev/mapper/arch /mnt
mkdir -p /mnt/{home,boot,mnt/data,var,tmp,swap)
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard,subvol=@home /dev/mapper/arch /mnt/home
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard,subvol=@data /dev/mapper/data /mnt/mnt/data
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard,subvol=@var /dev/mapper/arch /mnt/var
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard,subvol=@tmp /dev/mapper/arch /mnt/tmp
mount -o defaults,compress=lzo,noatime,nodev,ssd,discard,subvol=@swap /dev/mapper/arch /mnt/swap

# Create swapfile
btrfs filesystem mkswapfile --size=64G /mnt/btrfs/arch/@root/swapfile
swapon /mnt/swapfile
# to get resume offset:
RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /swapfile)

##
echo -e "prepare disk for installation"
mkdir /mnt/boot
mount /dev/nvme0n1p1 /mnt/boot

# Install Arch Linux
pacman -Sy
pacstrap  /mnt base linux-zen linux-zen-headers base-devel openssh sudo ntp wget grml-zsh-config btrfs-progs networkmanager usbutils linux-firmware sof-firmware yajl mkinitcpio git go nano zsh terminus-font refind intel-ucode usbutils

echo -e "Create fstab"
genfstab -L -p /mnt >> /mnt/etc/fstab
mkdir -p /mnt/mnt/btrfs-arch
sed 's/\/mnt\/swap/\/swap/g' /mnt/etc/fstab

echo -e " .. > allowing wheel group to sudo"
sed -i 's/^#\s*\(%wheel\s*ALL=(ALL)\s*ALL\)/\1/' /mnt/etc/sudoers

arch-chroot /mnt

echo -e "Tuning pacman"
echo -e ".. > Adding multilib"
sed -i 's|#[multilib]|[multilib]|' /etc/pacman.conf
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
echo -e ".. update pacman and system "
pacman -Syy
pacman -S --noconfirm archlinux-keyring
pacman-key --init
pacman-key --populate archlinux
pacman -Syu --noconfirm

# create $USER

echo -e "Setting up users"
echo -e ".. > setting root password"
passwd root << EOF
$PASSWORD
$PASSWORD
EOF
echo -e ".. > create user $NEWUSER with default password"
useradd -m -g users -G wheel,audio,disk,lp,network -s /bin/bash $NEWUSER
passwd $NEWUSER << EOF
$PASSWORD
$PASSWORD
EOF

echo -e ".. > Installing aur package manager"
# create a fake builduser
buildpkg(){
  CURRENT_DIR=$pwd
  wget https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz
  tar -xvzf $1.tar.gz -C /home/$NEWUSER
  chown ${NEWUSER}:users /home/$NEWUSER/$1 -R
  cd /home/$NEWUSER/$1
  sudo -u $NEWUSER bash -c "makepkg -s --noconfirm"
  pacman -U --noconfirm $1*.zst
  cd $CURRENT_dir
  rm ./$1.tar.gz
}

buildpkg package-query
buildpkg yay

wget https://raw.githubusercontent.com/megavolts/ArchLinux/master/X220/source/mirrorupgrade.hook -P /etc/pacman.d/hooks/
echo -e "Configure system"
echo "FONT=ter-132n" >> /etc/vconsole.conf
echo -e ".. > changing locales"
wget https://raw.githubusercontent.com/megavolts/ArchLinux/master/X220/source/locale.gen -O /etc/locale.gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
locale-gen
localectl set-locale LANG=en_US.UTF-8

echo -e ".. > set timezone to America/Anchorage"
timedatectl set-ntp 1
timedatectl set-timezone America/Anchorage

echo -e ".. > setting hostname & network manager"
hostnamectl set-hostname $HOSTNAME
echo "127.0.1.1    $HOSTNAME.localdomain    $HOSTNAME" >> /etc/hosts
echo $HOSTNAME > /etc/hostname

echo -e ".. > start services"
systemctl enable NetworkManager
systemctl enable sshd
systemctl enable btrfs-scrub@home.timer 
systemctl enable btrfs-scrub@-.timer 

# add btrfs hook and remove fsck
sed -i 's/fsck)/btrfs)/g' /etc/mkinitcpio.conf

# add encrypt and keyboard hook before filesystems
sed -i 's/filesystems keyboard/keyboard encrypt resume filesystems/g' /etc/mkinitcpio.conf

# modify refind.conf
if $INSTALL
then
  pacman -S refind
  refind-install --usedefault /dev/nvme0n1p1
  cp /boot/refind_linux.conf /boot/refind_linux.conf.old
  wget https://raw.githubusercontent.com/megavolts/ArchLinux/master/X1yoga6/sources/refind.conf -O /boot/refind_linux.conf
fi

# Rebuild kernel
if [ -f /boot/vmlinuz-linux ]; then
	mkinitcpio -p linux
fi
if [ -f /boot/vmlinuz-linux-zen ]; then
	mkinitcpio -p linux-zen
fi
exit

umount /mnt/{boot,home,data}
reboot



#/bin/bash!
# ssh megavolts@IP

PASSWORD=$1
NEWUSER=$2
HOSTNAME=$3

yay -S --noconfirm zsh
chsh -s $(which zsh)

sudo su
chsh -s $(which zsh)

echo -e ".. > Optimize mirrorlist"
yay -S --noconfirm reflector
reflector --latest 20 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist

pacman -S --noconfirm mlocate
updatedb

# Enable snapshots with snapper 
yay -S --noconfirm snapper acl snapper-gui-git
echo -e "... >> Configure snapper"
snapper -c root create-config /

# we want the snaps located /at /mnt/btrfs-root/_snaptshot rather than at the root
btrfs subvolume delete /.snapshots

if [ -d "/home/.snapshots"]
then
  rmdir /home/.snapshots
fi
snapper -c home create-config /home
btrfs subvolume delete /home/.snapshots

mkdir /.snapshots
mkdir /home/.snapshots

mount -o compress=lzo,subvol=@snapshots/@root_snaps /dev/mapper/arch /.snapshots
mount -o compress=lzo,subvol=@snapshots/@home_snaps /dev/mapper/arch /home/.snapshots

# Add entry in fstab
# echo "# Snapper subvolume" >> /etc/fstab # add snapper subvolume to fstab
echo "LABEL=arch /.snapshots btrfs rw,noatime,ssd,discard,compress=lzo,space_cache,subvol=@snapshots/@root_snaps   0 0" >> /etc/fstab
echo "LABEL=arch /home/.snapshots  btrfs rw,noatime,ssd,discardcompress=lzo,space_cache,subvol=@snapshots/@home_snaps   0 0" >> /etc/fstab

# echo "# Snapper subvolume" >> /etc/fstab # add snapper subvolume to fstab
sed "s/ALLOW_USERS=\"/ALLOW_USERS=\"$NEWUSER/g" -i /etc/snapper/configs/home # Allow $NEWUSER to modify the files
sed "s/ALLOW_USERS=\"/ALLOW_USERS=\"$NEWUSER/g" -i /etc/snapper/configs/root
sed "s/ALLOW_GROUPS=\"/ALLOW_GROUPS=\"wheel/g" -i /etc/snapper/configs/home # Allow $NEWUSER to modify the files
sed "s/ALLOW_GROUPS=\"/ALLOW_GROUPS=\"wheel/g" -i /etc/snapper/configs/root

sed "s/SYNC_ACL=\"no/SYNC_ACL=\"yes/g" -i /etc/snapper/configs/root
sed "s/SYNC_ACL=\"no/SYNC_ACL=\"yes/g" -i /etc/snapper/configs/root

sed 's/PRUNENAMES = "/PRUNENAMES = ".snapshots /g' -i /etc/updatedb.conf # do not index snapshot via mlocate

systemctl start snapper-timeline.timer snapper-cleanup.timer  # start and enable snapper
systemctl enable snapper-timeline.timer snapper-cleanup.timer

# Execute cleanup everyhour:
SYSTEMD_EDITOR=tee systemctl edit snapper-cleanup.timer <<EOF
[Timer]
OnUnitActiveSec=1h
EOF

# Execute snapshot every 5 minutes:
SYSTEMD_EDITOR=tee systemctl edit snapper-timeline.timer <<EOF
[Timer]
OnCalendar=*:0\/5/
EOF

setfacl -Rm "u:megavolts:rwx" /etc/snapper/configs
setfacl -Rdm "u:megavolts:rwx" /etc/snapper/configs

# update snap config for home directory
sed  "s|TIMELINE_MIN_AGE=\"1800\"|TIMELINE_MIN_AGE=\"1800\"|g" -i /etc/snapper/configs/home      # keep all backup for 2 days (172800 seconds)
sed  "s|TIMELINE_LIMIT_HOURLY=\"10\"|TIMELINE_LIMIT_HOURLY=\"96\"|g" -i /etc/snapper/configs/home  # keep hourly backup for 96 hours
sed  "s|TIMELINE_LIMIT_DAILY=\"10\"|TIMELINE_LIMIT_DAILY=\"14\"|g" -i /etc/snapper/configs/home    # keep daily backup for 14 days
sed  "s|TIMELINE_LIMIT_WEEKLY=\"0\"|TIMELINE_LIMIT_WEEKLY=\"0\"|g" -i /etc/snapper/configs/home    # do not keep weekly backup
sed  "s|TIMELINE_LIMIT_MONTHLY=\"10\"|TIMELINE_LIMIT_MONTHLY=\"12\"|g" -i /etc/snapper/configs/home # keep monthly backup for 12 months
sed  "s|TIMELINE_LIMIT_YEARLY=\"10\"|TIMELINE_LIMIT_YEARLY=\"5\"|g" -i /etc/snapper/configs/home   # keep yearly backup for 10 years

# enable snapshot at boot
systemctl enable snapper-boot.timer

# Copy partition on kernel update to enable backup
echo /usr/share/libalpm/hooks/50_bootbackup.hook << EOF  
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up /boot...
When = PostTransaction
Exec = /usr/bin/rsync -a --delete /boot /.bootbackup
EOF
mkdir /.bootbackup

# enable snapshot before and after install
yay -S --noconfirm snap-pac rsync


## Enable fstrim for ssd
pacman -S util-linux fwupd
systemctl enable fstrim.trimer --now 

pacman -S --noconfirm packagekit 

## Graphical interface
echo -e ".. install drivers specific to X1 with Iris"
pacman -S --noconfirm mesa vulkan-intel vulkan-mesa-layers

echo -e ".. install drivers specific to NVIDIA"
pacman -S --noconfirm nvidia-dkms lib32-nvidia-utils
pacman -Rns xf86-video-nouveau
# Blacklist nouveau
echo "blacklist nouveau" >> /etc/modprobe.d/00-nouveau_blacklist.conf 

# remove kms from HOOKS array
mkinitcpio -p linux-zen

echo -e ".. install hybrid switch (PRIME Offload)"
pacman -S --noconfirm nvidia-prime

echo -e ".. Install xorg and input"
pacman -S --noconfirm xorg-server xorg-apps xorg-xinit xorg-xrandr xorg-xkill xorg-xauth

echo -e "... install plasma windows manager"
pacman -S --noconfirm plasma-desktop sddm networkmanager  plasma-nm kscreen powerdevil plasma-wayland-session plasma-pa plasma-thunderbolt jack2 ttf-droid wireplumber phonon-qt5-streamer

echo -e ".. install audio server"
yay -Sy --noconfirm pipewire lib32-pipewire pipewire-docs qpwgraph pipewire-alsa gst-plugin-pipewire

echo -e ".. Installing bluetooth"
yay -S --noconfirm bluez bluez-utils bluedevil
systemctl enable --now bluetooth

yay -S --noconfirm yakuake kdialog kfind arp-scan htop kdeconnect barrier lsof strace wl-clipboard pass-git kwallet-pam sddm-kcm xdg-desktop-portal-kde



# Unlock cryptdata at boot and mount @data, @photography subvolume
echo "data           /dev/disk/by-partlabel/cryptdata             /etc/data.keyfile" >> /etc/crypttab




# Unlock cryptdata at boot, and mount data tank:
echo "data           /dev/disk/by-partlabel/cryptdata             /etc/data.keyfile" >> /etc/crypttab
echo "# BTRFS volume"  >> /etc/fstab
mkdir -p /mnt/btrfs/{data,arch}
echo "/dev/mapper/arch  /mnt/btrfs/arch btrfs rw,noatime,ssd,discard,compress=lzo,space_cache=v2,noauto   0 0" >> /mnt/etc/fstab
echo "/dev/mapper/data  /mnt/btrfs/data btrfs rw,noatime,ssd,discard,compress=lzo,space_cache=v2,noauto   0 0" >> /etc/fstab
mount -a

echo "# BTRFS data subvolume"
echo "/dev/mapper/data /mnt/data btrfs rw,noatime,ssd,discard,compress=lzo,space_cache,subvol=@data   0 0" >> /etc/fstab
mount -a

if [ !  -e /mnt/btrfs/data/@media ]
then
  btrfs subvolume create /mnt/btrfs/data/@media 
fi
if [ !  -e /mnt/btrfs/data/@photography ]
then
  btrfs subvolume create /mnt/btrfs/data/@photography
fi
if [ !  -e /mnt/btrfs/data/@UAF-data ]
then
  btrfs subvolume create /mnt/btrfs/data/@UAF-data
fi

mkdir -p /mnt/data/media
echo "/dev/mapper/data  /mnt/data/media               btrfs rw,nodev,noatime,compress=lzo,ssd,discard,space_cache=v2,subvol=@media 0 0" >> /etc/fstab
mkdir -p /mnt/data/UAF-data
echo "/dev/mapper/data  /mnt/data/UAF-data            btrfs rw,nodev,noatime,compress=lzo,ssd,discard,space_cache=v2,subvol=@UAF-data  0 0" >> /etc/fstab
mkdir -p /mnt/data/media/photography     
echo "/dev/mapper/data  /mnt/data/media/photography   btrfs rw,nodev,noatime,compress=lzo,ssd,discard,space_cache=v2,subvol=@photography 0 0" >> /etc/fstab

systemctl daemon-reload
mount -a

setfacl -m u:${NEWUSER}:rwx -R /mnt/data/
setfacl -m u:${NEWUSER}:rwx -Rd /mnt/data/

## Disable kwallet and install gnome keyring
#echo -e ".. disable kwallet for users"
#tee /home/$NEWUSER/.config/kwalletrc <<EOF
#[Wallet]
#Enabled=false
#EOF

echo "KWallet login"
echo "auth            optional        pam_kwallet5.so" >> /etc/pam.d/sddm
echo "session         optional        pam_kwallet5.so auto_start" >> /etc/pam.d/sddm

#echo -e "... enable 2 fingers scroll for mozilla firefox"
#mkdir -p /home/$NEWUSER/.config/environment.d/
#echo "PATH='$PATH:$HOME/scripts'" >> /home/$NEWUSER/.config/environment.d/envvars.conf
#echo "GUIVAR=value" >> /home/$NEWUSER/.config/environment.d/envvars.conf
#echo "MOZ_ENABLE_WAYLAND=1" >> /home/$NEWUSER/.config/environment.d/envvars.conf

#/bin/bash!
# ssh megavolts@IP

# Disable COW for thunderbird and baloo
mkdir /home/$USER/.thunderbird
chattr +C /home/$USER/.thunderbird
mkdir /home/$USER/.local/share/baloo/
chattr +C /home/$USER/.local/share/baloo/
mkdir -p /home/$USER/.config/protonmail/bridge/cache 
chattr +C /home/$USER/.config/protonmail/bridge/cache
mkdir -p /home/$USER/.cache/yay
chattr +C /home/$USER/.cache/yay

PWD=$1

/etc/updatedb.conf
PRUNENAMES = ".snapshots"

echo -e "Install software"
echo -e ".. partition tools"
yay -S --noconfirm gparted ntfs-3g exfat-utils mtools sshfs bindfs

# echo -e "... tools for hotspot"
yay -S --noconfirm dnsmasq nm-connection-editor openconnect networkmanager-openconnect

# echo -e "... tools for android"
yay -S --noconfirm android-tools android-udev  

# echo -e "... installing fonts"
yay -S --noconfirm  freefonts ttf-inconsolata ttf-hanazono ttf-hack ttf-anonymous-pro ttf-liberation gnu-free-fonts noto-fonts ttf-bitstream-vera ttf-croscore ttf-dejavu ttf-droid ttf-ibm-plex

# echo -e ".. internet software"
yay -S --noconfirm firefox thunderbird filezilla  nextcloud-client zoom teams slack-wayland telegram-desktop signal-desktop

# echo -e ".. coding tools"
yay -S --noconfirm sublime-text-4 terminator zettlr

# echo -e ".. media"
yay -S --noconfirm dolphin dolphin-plugins qt5-imageformats ffmpegthumbs lzop kdegraphics-thumbnailers kimageformats libappimage raw-thumbnailer kio-gdrive

yay -S --noconfirm ark unrar p7zip unzip

# echo -e "... viewer"
yay -S --noconfirm okular spectacle discount kdegraphics-mobipocket

# echo -e "... images"
yay -S --noconfirm imagemagick guetzli geeqie inkscape gimp darktable libraw hugin digikam kipi-plugins


# echo -e "... musics and videos"
yay -S --noconfirm vlc ffmpeg jellyfin-bin jellyfin-media-player picard picard-plugins-git


# echo -e ".. office"
yay -S --noconfirm libreoffice-fresh mendeleydesktop texmaker texlive-most zotero
yay -S --noconfirm aspell-fr aspell-en aspell-de hunspell-en_US hunspell-fr hunspell-de hyphen-en hyphen-en hyphen-de libmythes mythes-en mythes-fr libreoffice-extension-grammalecte-fr

# echo -e ".. printing tools"
yay -S --noconfirm cups system-config-printer
systemctl enable --now cups.service

# echo -e ".. confing tools"
yay -S --noconfirm rsync kinfocenter kruler sonnet fwupd discover packagekit-qt5

yay -S --noconfirm virtualbox virtualbox-guest-iso virtualbox-host-dkms virtualbox-ext-oracle
groupadd vboxusers
gpasswd -a megavolts vboxusers
#echo "vboxdrv vboxnetadp vboxnetflt" >> /usr/lib/modules-load.d/virtualbox-host-dkms.conf    
# For cursor in wayland session
echo "KWIN_FORCE_SW_CURSOR=1" >> /etc/environement


# # python packages
yay -S --noconfirm pycharm-professional python-pip python-setuptools tk python-utils
yay -S --noconfirm python-numpy python-matplotlib python-scipy python-pandas python-openpyxl python-basemap python-pillow cython jupyterlab jupyter-notebook ipython 

echo -e "... don't forget to install Antidote"

yay -S --noconfirm vdhcoapp-bin

# yaourtpkg 'xdg-desktop-portal xdg-desktop-portal-kde'
# yaourtpkg 'qownnotes'

yay -S --noconfirm profile-sync-daemon
echo -e "... configure profile-sync-daemon to improve speed, reduced wear to physical drives"
echo "megavolts ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper" >> /etc/sudoers
mkdir /home/megavolts/.config/psd/
wget https://raw.githubusercontent.com/megavolts/ArchLinux/master/config/psd.conf -O /home/megavolts/.config/psd/psd.conf
systemctl enable --now --user psd

# castnow cast_control mkchromecast

yay -S --noconfirm protonmail-bridge-bin protonvpn-gui pass-git qtpass secret-service
systemctl enable --now --user secretserviced.service 
sed -i '1s/^/"user_ssl_smtp": "false"/' .config/protonmail/bridge/prefs.json
gpg --batch --passphrase '' --quick-gen-key 'ProtonMail Bridge' default default never
pass init "ProtonMail Bridge"
protonmail-bridge --cli






yay -S c++utilities qtutilities
yay -S qtforkawesome syncthing syncthingtray